#!/bin/bash
# HIPAA/FedRAMP Environment Configuration
# This file contains all environment variables used across the implementation
# Source this file in each script: source ../config/environment.conf

# ==============================================================================
# ORGANIZATION SETTINGS - REQUIRED - MUST BE UPDATED
# ==============================================================================
# REQUIRED: Your Google Cloud Organization ID
# Find this by running: gcloud organizations list
export ORG_ID=""  # Example: "123456789012"

# REQUIRED: Your active GCP billing account ID  
# Find this by running: gcloud beta billing accounts list --filter=open=true
export BILLING_ACCOUNT_ID=""  # Example: "ABCDEF-123456-GHIJKL"

# REQUIRED: Your organization's email domain
# This will be used for user groups and email addresses
export ORGANIZATION_DOMAIN=""  # Example: "yourcompany.com"

# REQUIRED: Short identifier for your organization (lowercase, no spaces)
# This will be used as a prefix for resource names
export ORGANIZATION_SHORT=""  # Example: "acme" or "myorg"

# OPTIONAL: Full organization name for descriptions
export ORGANIZATION_NAME="Your Organization"  # Example: "Acme Healthcare"

# ==============================================================================
# PROJECT CONFIGURATION - AUTO-GENERATED BASED ON YOUR INPUTS
# ==============================================================================
export FOLDER_DISPLAY_NAME="${ORGANIZATION_SHORT}-Health-Sciences-Secure"
export FOLDER_ID=""  # Will be set after folder creation

# Primary secure project
export PROJECT_ID="${ORGANIZATION_SHORT}-health-sciences-prod"
export PROJECT_NAME="${ORGANIZATION_NAME} Health Sciences Production"

# Logging project
export LOG_PROJECT_ID="${ORGANIZATION_SHORT}-health-logging-central"
export LOG_PROJECT_NAME="${ORGANIZATION_NAME} Health Logging Central"

# Research project (Phase 2)
export RESEARCH_PROJECT_ID="${ORGANIZATION_SHORT}-health-research-lake"
export RESEARCH_PROJECT_NAME="${ORGANIZATION_NAME} Health Research Lake"

# ==============================================================================
# REGIONAL CONFIGURATION - ENHANCED
# ==============================================================================
# Choose your deployment location strategy
export LOCATION_TYPE="single-region"  # Options: "single-region" or "multi-region"

# For single-region deployment, choose from FedRAMP-approved regions:
# us-central1, us-east1, us-east4, us-west1, us-west2, us-west3, us-west4
# northamerica-northeast1, northamerica-northeast2, southamerica-east1
# europe-west1, europe-west2, europe-west3, europe-west4, europe-north1
# asia-south1, asia-southeast1
export REGION="us-central1"  # Used for single-region deployments
export ZONE="${REGION}-a"    # Auto-generated based on region

# For multi-region deployment (storage and BigQuery)
export MULTI_REGION="US"     # Options: "US" (United States), "EU" (European Union)

# Derived location variable - used for buckets and BigQuery datasets
if [ "$LOCATION_TYPE" = "multi-region" ]; then
    export LOCATION="$MULTI_REGION"
else
    export LOCATION="$REGION"
fi

# Note: Multi-region is more expensive but provides higher availability
# Single-region: $0.020/GB/month, Multi-region: $0.026/GB/month (30% more)

# ==============================================================================
# NETWORK CONFIGURATION
# ==============================================================================
# Primary VPC
export VPC_NAME="${ORGANIZATION_SHORT}-health-secure-vpc"
export SUBNET_NAME="${ORGANIZATION_SHORT}-health-subnet"
export SUBNET_RANGE="10.0.0.0/24"

# Research VPC (Phase 2)
export RESEARCH_VPC_NAME="${ORGANIZATION_SHORT}-health-research-vpc"
export RESEARCH_SUBNET_NAME="${ORGANIZATION_SHORT}-health-research-subnet"
export RESEARCH_SUBNET_RANGE="10.1.0.0/24"

# REQUIRED: Your on-premises network CIDR range (if using hybrid connectivity)
# This is the private IP range of your on-premises data center
# Leave empty if not using VPN/hybrid connectivity
export ON_PREM_NETWORK_RANGE=""  # Example: "10.0.0.0/8" or "192.168.0.0/16" - REPLACE WITH YOUR ACTUAL RANGE

# REQUIRED: Your organization's public IP ranges for admin access
# These are the public IPs from which administrators will access the environment
# Format: Comma-separated CIDR blocks
export CORPORATE_IP_RANGES=""  # Example: "203.0.113.0/24,198.51.100.0/24" - REPLACE WITH YOUR ACTUAL PUBLIC IPs

# ==============================================================================
# VPN CONFIGURATION - REQUIRED IF USING HYBRID CONNECTIVITY
# ==============================================================================
export VPN_GATEWAY_NAME="${ORGANIZATION_SHORT}-health-vpn-gateway"
export CLOUD_ROUTER_NAME="${ORGANIZATION_SHORT}-health-cloud-router"
export CLOUD_ROUTER_ASN="64512"  # Default ASN for Google Cloud side
export VPN_TUNNEL_NAME="${ORGANIZATION_SHORT}-health-vpn-tunnel"

# REQUIRED (if using VPN): Your on-premises VPN gateway public IP address
export PEER_IP=""  # Example: "203.0.113.1" - REPLACE WITH YOUR VPN ENDPOINT IP

# REQUIRED (if using VPN): Pre-shared key for VPN authentication
# Generate a strong key: openssl rand -base64 32
export SHARED_SECRET=""  # REPLACE WITH YOUR GENERATED SHARED SECRET

# REQUIRED (if using VPN): Your on-premises BGP ASN
export PEER_ASN=""  # Example: "64513" - REPLACE WITH YOUR ASN

# ==============================================================================
# LOGGING CONFIGURATION - AUTO-GENERATED
# ==============================================================================
export LOG_SINK_NAME="${ORGANIZATION_SHORT}-health-central-log-sink"
export LOG_BUCKET_NAME="${ORGANIZATION_SHORT}-health-audit-logs-${RANDOM}"  # Unique bucket name
export LOG_DATASET_NAME="${ORGANIZATION_SHORT}_health_audit_logs"

# ==============================================================================
# VPC SERVICE CONTROLS CONFIGURATION - AUTO-GENERATED
# ==============================================================================
export PERIMETER_NAME="${ORGANIZATION_SHORT}-health-secure-perimeter"
export RESEARCH_PERIMETER_NAME="${ORGANIZATION_SHORT}-health-research-perimeter"
export ACCESS_POLICY_TITLE="${ORGANIZATION_NAME} Health Sciences Access Policy"
export ACCESS_POLICY_NAME=""  # Will be set during implementation

# ==============================================================================
# DATA PROTECTION CONFIGURATION - AUTO-GENERATED
# ==============================================================================
export KMS_KEYRING_NAME="${ORGANIZATION_SHORT}-health-keyring"
export STORAGE_KEY_NAME="storage-key"
export BIGQUERY_KEY_NAME="bigquery-key"
export COMPUTE_KEY_NAME="compute-key"
export KMS_KEY_DATABASE="database-key"

# Storage buckets - globally unique names will be generated
export PHI_BUCKET_NAME="${ORGANIZATION_SHORT}-health-phi-data-${RANDOM}"
export RESEARCH_BUCKET_NAME="${ORGANIZATION_SHORT}-health-research-data-${RANDOM}"

# ==============================================================================
# DATA PIPELINE CONFIGURATION - AUTO-GENERATED
# ==============================================================================
export RAW_DATASET="${ORGANIZATION_SHORT}_health_raw"
export DEIDENTIFIED_DATASET="${ORGANIZATION_SHORT}_health_deidentified"
export VIEWS_DATASET="${ORGANIZATION_SHORT}_health_research_views"

# ==============================================================================
# IDENTITY CONFIGURATION - REQUIRED ENTERPRISE GROUPS
# ==============================================================================
# IMPORTANT: Provide your existing Google Workspace group identities
# These groups should already exist in your organization with appropriate members
# Each group will be granted specific permissions in the GCP environment

# Core administrative and security groups
export SECURITY_TEAM_GROUP=""           # Example: "security-team@yourcompany.com"
export ADMIN_GROUP=""                   # Example: "cloud-admins@yourcompany.com"
export HEALTH_ADMINS_GROUP=""           # Example: "health-system-admins@yourcompany.com"

# Research and data access groups
export RESEARCHERS_GROUP=""             # Example: "health-researchers@yourcompany.com"
export RESEARCH_ADMINS_GROUP=""         # Example: "research-admins@yourcompany.com"
export RESEARCH_DATA_GROUP=""           # Example: "data-team@yourcompany.com"
export EXTERNAL_COLLABORATORS_GROUP=""  # Example: "external-partners@yourcompany.com"

# Compliance and governance groups
export PRIVACY_GROUP=""                 # Example: "privacy-office@yourcompany.com"
export DATA_GOVERNANCE_GROUP=""         # Example: "data-governance@yourcompany.com"
export HEALTH_IT_GROUP=""               # Example: "health-it@yourcompany.com"

# ==============================================================================
# SERVICE LISTS
# ==============================================================================
# Minimal critical services to restrict beyond Assured Workloads defaults
export RESTRICTED_SERVICES=(
    "cloudresourcemanager.googleapis.com"  # Prevent project modifications
    "iamcredentials.googleapis.com"        # Prevent credential exfiltration
)

# Core APIs required for basic functionality - let researchers enable others as needed
export REQUIRED_APIS=(
    "cloudresourcemanager.googleapis.com"
    "compute.googleapis.com"
    "storage.googleapis.com"
    "bigquery.googleapis.com"
    "logging.googleapis.com"
    "monitoring.googleapis.com"
    "cloudkms.googleapis.com"
    "serviceusage.googleapis.com"  # Allow researchers to enable additional APIs
)

# ==============================================================================
# HELPER FUNCTIONS
# ==============================================================================

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if a command succeeded
check_status() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓${NC} $1"
        return 0
    else
        echo -e "${RED}✗${NC} $1"
        return 1
    fi
}

# Function to save state
save_state() {
    local key=$1
    local value=$2
    echo "export ${key}=\"${value}\"" >> ../config/state.conf
}

# Function to load state
load_state() {
    if [ -f ../config/state.conf ]; then
        source ../config/state.conf
    fi
}
